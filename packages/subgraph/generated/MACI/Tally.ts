// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposited extends ethereum.Event {
  get params(): Deposited__Params {
    return new Deposited__Params(this);
  }
}

export class Deposited__Params {
  _event: Deposited;

  constructor(event: Deposited) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ResultAdded extends ethereum.Event {
  get params(): ResultAdded__Params {
    return new ResultAdded__Params(this);
  }
}

export class ResultAdded__Params {
  _event: ResultAdded;

  constructor(event: ResultAdded) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get result(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Tally__tallyResultsResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getValue(): BigInt {
    return this.value0;
  }

  getFlag(): boolean {
    return this.value1;
  }
}

export class Tally extends ethereum.SmartContract {
  static bind(address: Address): Tally {
    return new Tally("Tally", address);
  }

  MESSAGE_DATA_LENGTH(): i32 {
    let result = super.call(
      "MESSAGE_DATA_LENGTH",
      "MESSAGE_DATA_LENGTH():(uint8)",
      [],
    );

    return result[0].toI32();
  }

  try_MESSAGE_DATA_LENGTH(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "MESSAGE_DATA_LENGTH",
      "MESSAGE_DATA_LENGTH():(uint8)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  alpha(): BigInt {
    let result = super.call("alpha", "alpha():(uint256)", []);

    return result[0].toBigInt();
  }

  try_alpha(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("alpha", "alpha():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateAlpha(budget: BigInt): BigInt {
    let result = super.call(
      "calculateAlpha",
      "calculateAlpha(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(budget)],
    );

    return result[0].toBigInt();
  }

  try_calculateAlpha(budget: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateAlpha",
      "calculateAlpha(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(budget)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimed(param0: BigInt): boolean {
    let result = super.call("claimed", "claimed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBoolean();
  }

  try_claimed(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("claimed", "claimed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  cooldown(): BigInt {
    let result = super.call("cooldown", "cooldown():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cooldown(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cooldown", "cooldown():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllocatedAmount(index: BigInt, voiceCreditsPerOption: BigInt): BigInt {
    let result = super.call(
      "getAllocatedAmount",
      "getAllocatedAmount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromUnsignedBigInt(voiceCreditsPerOption),
      ],
    );

    return result[0].toBigInt();
  }

  try_getAllocatedAmount(
    index: BigInt,
    voiceCreditsPerOption: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAllocatedAmount",
      "getAllocatedAmount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromUnsignedBigInt(voiceCreditsPerOption),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllocatedAmounts(voiceCreditsPerOptions: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "getAllocatedAmounts",
      "getAllocatedAmounts(uint256[]):(uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(voiceCreditsPerOptions)],
    );

    return result[0].toBigIntArray();
  }

  try_getAllocatedAmounts(
    voiceCreditsPerOptions: Array<BigInt>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAllocatedAmounts",
      "getAllocatedAmounts(uint256[]):(uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(voiceCreditsPerOptions)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPublicCircuitInputs(
    _batchStartIndex: BigInt,
    _newTallyCommitment: BigInt,
  ): Array<BigInt> {
    let result = super.call(
      "getPublicCircuitInputs",
      "getPublicCircuitInputs(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_batchStartIndex),
        ethereum.Value.fromUnsignedBigInt(_newTallyCommitment),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_getPublicCircuitInputs(
    _batchStartIndex: BigInt,
    _newTallyCommitment: BigInt,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPublicCircuitInputs",
      "getPublicCircuitInputs(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_batchStartIndex),
        ethereum.Value.fromUnsignedBigInt(_newTallyCommitment),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  hash2(array: Array<BigInt>): BigInt {
    let result = super.call("hash2", "hash2(uint256[2]):(uint256)", [
      ethereum.Value.fromUnsignedBigIntArray(array),
    ]);

    return result[0].toBigInt();
  }

  try_hash2(array: Array<BigInt>): ethereum.CallResult<BigInt> {
    let result = super.tryCall("hash2", "hash2(uint256[2]):(uint256)", [
      ethereum.Value.fromUnsignedBigIntArray(array),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hash3(array: Array<BigInt>): BigInt {
    let result = super.call("hash3", "hash3(uint256[3]):(uint256)", [
      ethereum.Value.fromUnsignedBigIntArray(array),
    ]);

    return result[0].toBigInt();
  }

  try_hash3(array: Array<BigInt>): ethereum.CallResult<BigInt> {
    let result = super.tryCall("hash3", "hash3(uint256[3]):(uint256)", [
      ethereum.Value.fromUnsignedBigIntArray(array),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hash4(array: Array<BigInt>): BigInt {
    let result = super.call("hash4", "hash4(uint256[4]):(uint256)", [
      ethereum.Value.fromUnsignedBigIntArray(array),
    ]);

    return result[0].toBigInt();
  }

  try_hash4(array: Array<BigInt>): ethereum.CallResult<BigInt> {
    let result = super.tryCall("hash4", "hash4(uint256[4]):(uint256)", [
      ethereum.Value.fromUnsignedBigIntArray(array),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hash5(array: Array<BigInt>): BigInt {
    let result = super.call("hash5", "hash5(uint256[5]):(uint256)", [
      ethereum.Value.fromUnsignedBigIntArray(array),
    ]);

    return result[0].toBigInt();
  }

  try_hash5(array: Array<BigInt>): ethereum.CallResult<BigInt> {
    let result = super.tryCall("hash5", "hash5(uint256[5]):(uint256)", [
      ethereum.Value.fromUnsignedBigIntArray(array),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hashLeftRight(left: BigInt, right: BigInt): BigInt {
    let result = super.call(
      "hashLeftRight",
      "hashLeftRight(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(left),
        ethereum.Value.fromUnsignedBigInt(right),
      ],
    );

    return result[0].toBigInt();
  }

  try_hashLeftRight(left: BigInt, right: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "hashLeftRight",
      "hashLeftRight(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(left),
        ethereum.Value.fromUnsignedBigInt(right),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isTallied(): boolean {
    let result = super.call("isTallied", "isTallied():(bool)", []);

    return result[0].toBoolean();
  }

  try_isTallied(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isTallied", "isTallied():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxCap(): BigInt {
    let result = super.call("maxCap", "maxCap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxCap", "maxCap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxContributionAmount(): BigInt {
    let result = super.call(
      "maxContributionAmount",
      "maxContributionAmount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_maxContributionAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxContributionAmount",
      "maxContributionAmount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  messageProcessor(): Address {
    let result = super.call(
      "messageProcessor",
      "messageProcessor():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_messageProcessor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "messageProcessor",
      "messageProcessor():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mode(): i32 {
    let result = super.call("mode", "mode():(uint8)", []);

    return result[0].toI32();
  }

  try_mode(): ethereum.CallResult<i32> {
    let result = super.tryCall("mode", "mode():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  poll(): Address {
    let result = super.call("poll", "poll():(address)", []);

    return result[0].toAddress();
  }

  try_poll(): ethereum.CallResult<Address> {
    let result = super.tryCall("poll", "poll():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  recipientCount(): BigInt {
    let result = super.call("recipientCount", "recipientCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_recipientCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "recipientCount",
      "recipientCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sbCommitment(): BigInt {
    let result = super.call("sbCommitment", "sbCommitment():(uint256)", []);

    return result[0].toBigInt();
  }

  try_sbCommitment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sbCommitment", "sbCommitment():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sha256Hash(array: Array<BigInt>): BigInt {
    let result = super.call("sha256Hash", "sha256Hash(uint256[]):(uint256)", [
      ethereum.Value.fromUnsignedBigIntArray(array),
    ]);

    return result[0].toBigInt();
  }

  try_sha256Hash(array: Array<BigInt>): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sha256Hash",
      "sha256Hash(uint256[]):(uint256)",
      [ethereum.Value.fromUnsignedBigIntArray(array)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tallyBatchNum(): BigInt {
    let result = super.call("tallyBatchNum", "tallyBatchNum():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tallyBatchNum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tallyBatchNum",
      "tallyBatchNum():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tallyCommitment(): BigInt {
    let result = super.call(
      "tallyCommitment",
      "tallyCommitment():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_tallyCommitment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tallyCommitment",
      "tallyCommitment():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tallyResults(param0: BigInt): Tally__tallyResultsResult {
    let result = super.call(
      "tallyResults",
      "tallyResults(uint256):(uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Tally__tallyResultsResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
    );
  }

  try_tallyResults(
    param0: BigInt,
  ): ethereum.CallResult<Tally__tallyResultsResult> {
    let result = super.tryCall(
      "tallyResults",
      "tallyResults(uint256):(uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Tally__tallyResultsResult(value[0].toBigInt(), value[1].toBoolean()),
    );
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalAmount(): BigInt {
    let result = super.call("totalAmount", "totalAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalAmount", "totalAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSpent(): BigInt {
    let result = super.call("totalSpent", "totalSpent():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSpent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSpent", "totalSpent():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalTallyResults(): BigInt {
    let result = super.call(
      "totalTallyResults",
      "totalTallyResults():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalTallyResults(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalTallyResults",
      "totalTallyResults():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalVotesSquares(): BigInt {
    let result = super.call(
      "totalVotesSquares",
      "totalVotesSquares():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalVotesSquares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalVotesSquares",
      "totalVotesSquares():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  verifier(): Address {
    let result = super.call("verifier", "verifier():(address)", []);

    return result[0].toAddress();
  }

  try_verifier(): ethereum.CallResult<Address> {
    let result = super.tryCall("verifier", "verifier():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  verifyPerVOSpentVoiceCredits(
    _voteOptionIndex: BigInt,
    _spent: BigInt,
    _spentProof: Array<Array<BigInt>>,
    _spentSalt: BigInt,
    _voteOptionTreeDepth: i32,
    _spentVoiceCreditsHash: BigInt,
    _resultCommitment: BigInt,
  ): boolean {
    let result = super.call(
      "verifyPerVOSpentVoiceCredits",
      "verifyPerVOSpentVoiceCredits(uint256,uint256,uint256[][],uint256,uint8,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_voteOptionIndex),
        ethereum.Value.fromUnsignedBigInt(_spent),
        ethereum.Value.fromUnsignedBigIntMatrix(_spentProof),
        ethereum.Value.fromUnsignedBigInt(_spentSalt),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_voteOptionTreeDepth)),
        ethereum.Value.fromUnsignedBigInt(_spentVoiceCreditsHash),
        ethereum.Value.fromUnsignedBigInt(_resultCommitment),
      ],
    );

    return result[0].toBoolean();
  }

  try_verifyPerVOSpentVoiceCredits(
    _voteOptionIndex: BigInt,
    _spent: BigInt,
    _spentProof: Array<Array<BigInt>>,
    _spentSalt: BigInt,
    _voteOptionTreeDepth: i32,
    _spentVoiceCreditsHash: BigInt,
    _resultCommitment: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyPerVOSpentVoiceCredits",
      "verifyPerVOSpentVoiceCredits(uint256,uint256,uint256[][],uint256,uint8,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_voteOptionIndex),
        ethereum.Value.fromUnsignedBigInt(_spent),
        ethereum.Value.fromUnsignedBigIntMatrix(_spentProof),
        ethereum.Value.fromUnsignedBigInt(_spentSalt),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_voteOptionTreeDepth)),
        ethereum.Value.fromUnsignedBigInt(_spentVoiceCreditsHash),
        ethereum.Value.fromUnsignedBigInt(_resultCommitment),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  verifySpentVoiceCredits(
    _totalSpent: BigInt,
    _totalSpentSalt: BigInt,
    _resultCommitment: BigInt,
    _perVOSpentVoiceCreditsHash: BigInt,
  ): boolean {
    let result = super.call(
      "verifySpentVoiceCredits",
      "verifySpentVoiceCredits(uint256,uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_totalSpent),
        ethereum.Value.fromUnsignedBigInt(_totalSpentSalt),
        ethereum.Value.fromUnsignedBigInt(_resultCommitment),
        ethereum.Value.fromUnsignedBigInt(_perVOSpentVoiceCreditsHash),
      ],
    );

    return result[0].toBoolean();
  }

  try_verifySpentVoiceCredits(
    _totalSpent: BigInt,
    _totalSpentSalt: BigInt,
    _resultCommitment: BigInt,
    _perVOSpentVoiceCreditsHash: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifySpentVoiceCredits",
      "verifySpentVoiceCredits(uint256,uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_totalSpent),
        ethereum.Value.fromUnsignedBigInt(_totalSpentSalt),
        ethereum.Value.fromUnsignedBigInt(_resultCommitment),
        ethereum.Value.fromUnsignedBigInt(_perVOSpentVoiceCreditsHash),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  verifyTallyProof(
    _batchStartIndex: BigInt,
    _newTallyCommitment: BigInt,
    _proof: Array<BigInt>,
  ): boolean {
    let result = super.call(
      "verifyTallyProof",
      "verifyTallyProof(uint256,uint256,uint256[8]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_batchStartIndex),
        ethereum.Value.fromUnsignedBigInt(_newTallyCommitment),
        ethereum.Value.fromUnsignedBigIntArray(_proof),
      ],
    );

    return result[0].toBoolean();
  }

  try_verifyTallyProof(
    _batchStartIndex: BigInt,
    _newTallyCommitment: BigInt,
    _proof: Array<BigInt>,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyTallyProof",
      "verifyTallyProof(uint256,uint256,uint256[8]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_batchStartIndex),
        ethereum.Value.fromUnsignedBigInt(_newTallyCommitment),
        ethereum.Value.fromUnsignedBigIntArray(_proof),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  verifyTallyResult(
    _voteOptionIndex: BigInt,
    _tallyResult: BigInt,
    _tallyResultProof: Array<Array<BigInt>>,
    _tallyResultSalt: BigInt,
    _voteOptionTreeDepth: i32,
    _spentVoiceCreditsHash: BigInt,
    _perVOSpentVoiceCreditsHash: BigInt,
  ): boolean {
    let result = super.call(
      "verifyTallyResult",
      "verifyTallyResult(uint256,uint256,uint256[][],uint256,uint8,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_voteOptionIndex),
        ethereum.Value.fromUnsignedBigInt(_tallyResult),
        ethereum.Value.fromUnsignedBigIntMatrix(_tallyResultProof),
        ethereum.Value.fromUnsignedBigInt(_tallyResultSalt),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_voteOptionTreeDepth)),
        ethereum.Value.fromUnsignedBigInt(_spentVoiceCreditsHash),
        ethereum.Value.fromUnsignedBigInt(_perVOSpentVoiceCreditsHash),
      ],
    );

    return result[0].toBoolean();
  }

  try_verifyTallyResult(
    _voteOptionIndex: BigInt,
    _tallyResult: BigInt,
    _tallyResultProof: Array<Array<BigInt>>,
    _tallyResultSalt: BigInt,
    _voteOptionTreeDepth: i32,
    _spentVoiceCreditsHash: BigInt,
    _perVOSpentVoiceCreditsHash: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyTallyResult",
      "verifyTallyResult(uint256,uint256,uint256[][],uint256,uint8,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_voteOptionIndex),
        ethereum.Value.fromUnsignedBigInt(_tallyResult),
        ethereum.Value.fromUnsignedBigIntMatrix(_tallyResultProof),
        ethereum.Value.fromUnsignedBigInt(_tallyResultSalt),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_voteOptionTreeDepth)),
        ethereum.Value.fromUnsignedBigInt(_spentVoiceCreditsHash),
        ethereum.Value.fromUnsignedBigInt(_perVOSpentVoiceCreditsHash),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vkRegistry(): Address {
    let result = super.call("vkRegistry", "vkRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_vkRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall("vkRegistry", "vkRegistry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  voiceCreditFactor(): BigInt {
    let result = super.call(
      "voiceCreditFactor",
      "voiceCreditFactor():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_voiceCreditFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "voiceCreditFactor",
      "voiceCreditFactor():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get verifierContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get vkRegistryContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get pollContract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get mpContract(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get tallyOwner(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get pollMode(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get params(): ClaimCallParamsStruct {
    return changetype<ClaimCallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimCallParamsStruct extends ethereum.Tuple {
  get index(): BigInt {
    return this[0].toBigInt();
  }

  get voiceCreditsPerOption(): BigInt {
    return this[1].toBigInt();
  }

  get tallyResultProof(): Array<Array<BigInt>> {
    return this[2].toBigIntMatrix();
  }

  get tallyResultSalt(): BigInt {
    return this[3].toBigInt();
  }

  get voteOptionTreeDepth(): i32 {
    return this[4].toI32();
  }

  get spentVoiceCreditsHash(): BigInt {
    return this[5].toBigInt();
  }

  get perVOSpentVoiceCreditsHash(): BigInt {
    return this[6].toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get params(): InitCallParamsStruct {
    return changetype<InitCallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class InitCallParamsStruct extends ethereum.Tuple {
  get cooldownTime(): BigInt {
    return this[0].toBigInt();
  }

  get maxContribution(): BigInt {
    return this[1].toBigInt();
  }

  get maxCap(): BigInt {
    return this[2].toBigInt();
  }

  get payoutToken(): Address {
    return this[3].toAddress();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TallyVotesCall extends ethereum.Call {
  get inputs(): TallyVotesCall__Inputs {
    return new TallyVotesCall__Inputs(this);
  }

  get outputs(): TallyVotesCall__Outputs {
    return new TallyVotesCall__Outputs(this);
  }
}

export class TallyVotesCall__Inputs {
  _call: TallyVotesCall;

  constructor(call: TallyVotesCall) {
    this._call = call;
  }

  get _newTallyCommitment(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _proof(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class TallyVotesCall__Outputs {
  _call: TallyVotesCall;

  constructor(call: TallyVotesCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateSbCommitmentCall extends ethereum.Call {
  get inputs(): UpdateSbCommitmentCall__Inputs {
    return new UpdateSbCommitmentCall__Inputs(this);
  }

  get outputs(): UpdateSbCommitmentCall__Outputs {
    return new UpdateSbCommitmentCall__Outputs(this);
  }
}

export class UpdateSbCommitmentCall__Inputs {
  _call: UpdateSbCommitmentCall;

  constructor(call: UpdateSbCommitmentCall) {
    this._call = call;
  }
}

export class UpdateSbCommitmentCall__Outputs {
  _call: UpdateSbCommitmentCall;

  constructor(call: UpdateSbCommitmentCall) {
    this._call = call;
  }
}

export class WithdrawExtraCall extends ethereum.Call {
  get inputs(): WithdrawExtraCall__Inputs {
    return new WithdrawExtraCall__Inputs(this);
  }

  get outputs(): WithdrawExtraCall__Outputs {
    return new WithdrawExtraCall__Outputs(this);
  }
}

export class WithdrawExtraCall__Inputs {
  _call: WithdrawExtraCall;

  constructor(call: WithdrawExtraCall) {
    this._call = call;
  }

  get receivers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class WithdrawExtraCall__Outputs {
  _call: WithdrawExtraCall;

  constructor(call: WithdrawExtraCall) {
    this._call = call;
  }
}
