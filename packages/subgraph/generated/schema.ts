// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class MACI extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MACI entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type MACI must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MACI", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): MACI | null {
    return changetype<MACI | null>(
      store.get_in_block("MACI", id.toHexString()),
    );
  }

  static load(id: Bytes): MACI | null {
    return changetype<MACI | null>(store.get("MACI", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get stateTreeDepth(): BigInt {
    let value = this.get("stateTreeDepth");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stateTreeDepth(value: BigInt) {
    this.set("stateTreeDepth", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get numSignUps(): BigInt {
    let value = this.get("numSignUps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numSignUps(value: BigInt) {
    this.set("numSignUps", Value.fromBigInt(value));
  }

  get numPoll(): BigInt {
    let value = this.get("numPoll");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numPoll(value: BigInt) {
    this.set("numPoll", Value.fromBigInt(value));
  }

  get latestPoll(): Bytes {
    let value = this.get("latestPoll");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set latestPoll(value: Bytes) {
    this.set("latestPoll", Value.fromBytes(value));
  }

  get polls(): PollLoader {
    return new PollLoader(
      "MACI",
      this.get("id")!.toBytes().toHexString(),
      "polls",
    );
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get accounts(): AccountLoader {
    return new AccountLoader("User", this.get("id")!.toString(), "accounts");
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Account", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Account | null {
    return changetype<Account | null>(store.get_in_block("Account", id));
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get voiceCreditBalance(): BigInt {
    let value = this.get("voiceCreditBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set voiceCreditBalance(value: BigInt) {
    this.set("voiceCreditBalance", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class Request extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Request entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Request must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Request", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Request | null {
    return changetype<Request | null>(store.get_in_block("Request", id));
  }

  static load(id: string): Request | null {
    return changetype<Request | null>(store.get("Request", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get requestType(): string {
    let value = this.get("requestType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set requestType(value: string) {
    this.set("requestType", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get recipientIndex(): BigInt {
    let value = this.get("recipientIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set recipientIndex(value: BigInt) {
    this.set("recipientIndex", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get registryManager(): Bytes {
    let value = this.get("registryManager");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set registryManager(value: Bytes) {
    this.set("registryManager", Value.fromBytes(value));
  }

  get registry(): Bytes {
    let value = this.get("registry");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set registry(value: Bytes) {
    this.set("registry", Value.fromBytes(value));
  }
}

export class RegistryManager extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RegistryManager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RegistryManager must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RegistryManager", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RegistryManager | null {
    return changetype<RegistryManager | null>(
      store.get_in_block("RegistryManager", id.toHexString()),
    );
  }

  static load(id: Bytes): RegistryManager | null {
    return changetype<RegistryManager | null>(
      store.get("RegistryManager", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get requests(): RequestLoader {
    return new RequestLoader(
      "RegistryManager",
      this.get("id")!.toBytes().toHexString(),
      "requests",
    );
  }
}

export class Recipient extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Recipient entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Recipient must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Recipient", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Recipient | null {
    return changetype<Recipient | null>(
      store.get_in_block("Recipient", id.toHexString()),
    );
  }

  static load(id: Bytes): Recipient | null {
    return changetype<Recipient | null>(
      store.get("Recipient", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get metadataUrl(): string {
    let value = this.get("metadataUrl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set metadataUrl(value: string) {
    this.set("metadataUrl", Value.fromString(value));
  }

  get payout(): Bytes {
    let value = this.get("payout");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set payout(value: Bytes) {
    this.set("payout", Value.fromBytes(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get deleted(): boolean {
    let value = this.get("deleted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set deleted(value: boolean) {
    this.set("deleted", Value.fromBoolean(value));
  }

  get initialized(): boolean {
    let value = this.get("initialized");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set initialized(value: boolean) {
    this.set("initialized", Value.fromBoolean(value));
  }

  get registry(): Bytes {
    let value = this.get("registry");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set registry(value: Bytes) {
    this.set("registry", Value.fromBytes(value));
  }
}

export class Registry extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Registry entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Registry must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Registry", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Registry | null {
    return changetype<Registry | null>(
      store.get_in_block("Registry", id.toHexString()),
    );
  }

  static load(id: Bytes): Registry | null {
    return changetype<Registry | null>(store.get("Registry", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get metadataUrl(): string | null {
    let value = this.get("metadataUrl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadataUrl(value: string | null) {
    if (!value) {
      this.unset("metadataUrl");
    } else {
      this.set("metadataUrl", Value.fromString(<string>value));
    }
  }

  get poll(): Bytes | null {
    let value = this.get("poll");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set poll(value: Bytes | null) {
    if (!value) {
      this.unset("poll");
    } else {
      this.set("poll", Value.fromBytes(<Bytes>value));
    }
  }

  get recipients(): RecipientLoader {
    return new RecipientLoader(
      "Registry",
      this.get("id")!.toBytes().toHexString(),
      "recipients",
    );
  }
}

export class Poll extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Poll entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Poll must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Poll", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Poll | null {
    return changetype<Poll | null>(
      store.get_in_block("Poll", id.toHexString()),
    );
  }

  static load(id: Bytes): Poll | null {
    return changetype<Poll | null>(store.get("Poll", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get pollId(): BigInt {
    let value = this.get("pollId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set pollId(value: BigInt) {
    this.set("pollId", Value.fromBigInt(value));
  }

  get duration(): BigInt {
    let value = this.get("duration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }

  get treeDepth(): BigInt {
    let value = this.get("treeDepth");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set treeDepth(value: BigInt) {
    this.set("treeDepth", Value.fromBigInt(value));
  }

  get maxMessages(): BigInt {
    let value = this.get("maxMessages");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxMessages(value: BigInt) {
    this.set("maxMessages", Value.fromBigInt(value));
  }

  get maxVoteOption(): BigInt {
    let value = this.get("maxVoteOption");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxVoteOption(value: BigInt) {
    this.set("maxVoteOption", Value.fromBigInt(value));
  }

  get messageProcessor(): Bytes {
    let value = this.get("messageProcessor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set messageProcessor(value: Bytes) {
    this.set("messageProcessor", Value.fromBytes(value));
  }

  get tally(): Bytes {
    let value = this.get("tally");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tally(value: Bytes) {
    this.set("tally", Value.fromBytes(value));
  }

  get initTime(): BigInt | null {
    let value = this.get("initTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set initTime(value: BigInt | null) {
    if (!value) {
      this.unset("initTime");
    } else {
      this.set("initTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get mode(): BigInt {
    let value = this.get("mode");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mode(value: BigInt) {
    this.set("mode", Value.fromBigInt(value));
  }

  get stateRoot(): BigInt | null {
    let value = this.get("stateRoot");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stateRoot(value: BigInt | null) {
    if (!value) {
      this.unset("stateRoot");
    } else {
      this.set("stateRoot", Value.fromBigInt(<BigInt>value));
    }
  }

  get numSignups(): BigInt {
    let value = this.get("numSignups");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numSignups(value: BigInt) {
    this.set("numSignups", Value.fromBigInt(value));
  }

  get numMessages(): BigInt {
    let value = this.get("numMessages");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numMessages(value: BigInt) {
    this.set("numMessages", Value.fromBigInt(value));
  }

  get numSrQueueOps(): BigInt | null {
    let value = this.get("numSrQueueOps");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numSrQueueOps(value: BigInt | null) {
    if (!value) {
      this.unset("numSrQueueOps");
    } else {
      this.set("numSrQueueOps", Value.fromBigInt(<BigInt>value));
    }
  }

  get messageRoot(): BigInt | null {
    let value = this.get("messageRoot");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set messageRoot(value: BigInt | null) {
    if (!value) {
      this.unset("messageRoot");
    } else {
      this.set("messageRoot", Value.fromBigInt(<BigInt>value));
    }
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get maci(): Bytes {
    let value = this.get("maci");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set maci(value: Bytes) {
    this.set("maci", Value.fromBytes(value));
  }

  get registry(): Bytes | null {
    let value = this.get("registry");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set registry(value: Bytes | null) {
    if (!value) {
      this.unset("registry");
    } else {
      this.set("registry", Value.fromBytes(<Bytes>value));
    }
  }

  get votes(): VoteLoader {
    return new VoteLoader(
      "Poll",
      this.get("id")!.toBytes().toHexString(),
      "votes",
    );
  }
}

export class Tally extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tally entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Tally must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Tally", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Tally | null {
    return changetype<Tally | null>(
      store.get_in_block("Tally", id.toHexString()),
    );
  }

  static load(id: Bytes): Tally | null {
    return changetype<Tally | null>(store.get("Tally", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get results(): TallyResultLoader {
    return new TallyResultLoader(
      "Tally",
      this.get("id")!.toBytes().toHexString(),
      "results",
    );
  }

  get claims(): ClaimLoader {
    return new ClaimLoader(
      "Tally",
      this.get("id")!.toBytes().toHexString(),
      "claims",
    );
  }

  get deposits(): DepositLoader {
    return new DepositLoader(
      "Tally",
      this.get("id")!.toBytes().toHexString(),
      "deposits",
    );
  }

  get poll(): Bytes {
    let value = this.get("poll");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set poll(value: Bytes) {
    this.set("poll", Value.fromBytes(value));
  }
}

export class TallyResult extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TallyResult entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TallyResult must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TallyResult", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TallyResult | null {
    return changetype<TallyResult | null>(
      store.get_in_block("TallyResult", id),
    );
  }

  static load(id: string): TallyResult | null {
    return changetype<TallyResult | null>(store.get("TallyResult", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get result(): BigInt {
    let value = this.get("result");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set result(value: BigInt) {
    this.set("result", Value.fromBigInt(value));
  }

  get tally(): Bytes {
    let value = this.get("tally");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tally(value: Bytes) {
    this.set("tally", Value.fromBytes(value));
  }
}

export class Claim extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Claim entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Claim must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Claim", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Claim | null {
    return changetype<Claim | null>(store.get_in_block("Claim", id));
  }

  static load(id: string): Claim | null {
    return changetype<Claim | null>(store.get("Claim", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get tally(): Bytes {
    let value = this.get("tally");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tally(value: Bytes) {
    this.set("tally", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }
}

export class Deposit extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Deposit must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Deposit", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Deposit | null {
    return changetype<Deposit | null>(
      store.get_in_block("Deposit", id.toHexString()),
    );
  }

  static load(id: Bytes): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get tally(): Bytes {
    let value = this.get("tally");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tally(value: Bytes) {
    this.set("tally", Value.fromBytes(value));
  }
}

export class Vote extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Vote must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Vote", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Vote | null {
    return changetype<Vote | null>(
      store.get_in_block("Vote", id.toHexString()),
    );
  }

  static load(id: Bytes): Vote | null {
    return changetype<Vote | null>(store.get("Vote", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get data(): Array<BigInt> {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set data(value: Array<BigInt>) {
    this.set("data", Value.fromBigIntArray(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get poll(): Bytes {
    let value = this.get("poll");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set poll(value: Bytes) {
    this.set("poll", Value.fromBytes(value));
  }
}

export class PollLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Poll[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Poll[]>(value);
  }
}

export class AccountLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Account[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Account[]>(value);
  }
}

export class RequestLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Request[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Request[]>(value);
  }
}

export class RecipientLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Recipient[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Recipient[]>(value);
  }
}

export class VoteLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Vote[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Vote[]>(value);
  }
}

export class TallyResultLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TallyResult[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TallyResult[]>(value);
  }
}

export class ClaimLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Claim[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Claim[]>(value);
  }
}

export class DepositLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Deposit[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Deposit[]>(value);
  }
}
